/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ec.edu.uees.proyecto1erp;

import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javazoom.jlgui.basicplayer.BasicPlayer;
import javazoom.jlgui.basicplayer.BasicPlayerException;

/**
 *
 * @author Anthony
 */
public class Reproductor extends javax.swing.JFrame {

    /**
     * Creates new form Reproductor
     */
    public Reproductor() {
        initComponents();
        inicializarListaDeReproduccion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, 20));

        jPanel2.setLayout(new java.awt.GridLayout());

        jButton4.setText("PREV");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jPanel2.add(jButton4);

        jButton2.setText("STOP");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jPanel2.add(jButton2);

        jButton3.setText("NEXT");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jPanel2.add(jButton3);

        jButton5.setText("SHUFFLE");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jPanel2.add(jButton5);

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 360, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        detenerReproduccion();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        reproducirSiguienteCancion();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        reproducirCancionAnterior();
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        reproducirCancionAleatoria();
    }//GEN-LAST:event_jButton5MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reproductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reproductor().setVisible(true);
            }
        });
    }

    public void setjLabel1(String jLabel1) {
        this.jLabel1.setText(jLabel1);
    }
    
    private void inicializarListaDeReproduccion() {
        //Ruta de acceso de canciones:
        String carpetaPath = "Canciones";
        //String carpetaPath = "C:\\Users\\Anthony\\Documents\\NetBeansProjects\\Proyecto1erP\\src\\main\\java\\ec\\edu\\uees\\proyecto1erp";
        
        File carpeta = new File(carpetaPath);
        
        if (carpeta.exists() && carpeta.isDirectory()) {
            // Obtener la lista de archivos en la carpeta
            File[] archivos = carpeta.listFiles();

            // Recorrer los archivos y agregar las rutas de acceso de los archivos .wav a la lista
            for (File archivo : archivos) {
                if (archivo.isFile() && archivo.getName().toLowerCase().endsWith(".wav")) {
                    listaDeReproduccion.add(new Cancion(archivo.getName(),archivo.getAbsolutePath()));
                }
            }
        } else {
            System.err.println("La carpeta no existe o no es un directorio válido.");
        }
    }
    
    private void reproducirCancionActual() {
        if (listaDeReproduccion.isEmpty()) {
            return;
        }

        if (estaReproduciendo) {
            try {
                reproductor.stop();
            } catch (BasicPlayerException e) {
                e.printStackTrace();
            }
        }

        if (cancionActualNode == null) {
            cancionActualNode = listaDeReproduccion.getFirstNode();
        }

        reproductor = new BasicPlayer();
        try {
            reproductor.open(new File(cancionActualNode.getData().getRutaArchivo()));
            reproductor.play();
            estaReproduciendo = true;
            jLabel1.setText(cancionActualNode.getData().getTitulo());
        } catch (BasicPlayerException e) {
            e.printStackTrace();
        }
    }

    private void reproducirSiguienteCancion() {
        if (listaDeReproduccion.isEmpty()) {
            return;
        }

        cancionActualNode = listaDeReproduccion.getNextNode(cancionActualNode);
        if (cancionActualNode == null) {
            cancionActualNode = listaDeReproduccion.getFirstNode();
        }
        reproducirCancionActual();
    }

    private void reproducirCancionAnterior() {
        if (listaDeReproduccion.isEmpty()) {
            return;
        }

        cancionActualNode = listaDeReproduccion.getPreviousNode(cancionActualNode);
        if (cancionActualNode == null) {
            cancionActualNode = listaDeReproduccion.getLastNode();
        }

        reproducirCancionActual(); // Reproducir automáticamente la canción anterior
    }
    
    private void reproducirCancionAleatoria() {
        if (listaDeReproduccion.isEmpty()) {
            return;
        }

        int randomIndex = (int) (Math.random() * listaDeReproduccion.size());
        cancionActualNode = listaDeReproduccion.getFirstNode();
        for (int i = 0; i < randomIndex; i++) {
            cancionActualNode = listaDeReproduccion.getNextNode(cancionActualNode);
        }
        reproducirCancionActual();
    }
    
    private void detenerReproduccion() {
    if (estaReproduciendo && reproductor != null) {
        try {
            if (pausado) {
                reproductor.resume(); // Reanudar la reproducción
                pausado = false;
                jButton2.setText("STOP"); // Cambiar el texto del botón a "PAUSE"
            } else {
                reproductor.pause(); // Pausar la reproducción
                pausado = true;
                jButton2.setText("PLAY"); // Cambiar el texto del botón a "RESUME"
            }
        } catch (BasicPlayerException e) {
            e.printStackTrace(); // Manejo de excepción (puedes personalizar el manejo aquí)
        }
    }
}

    public void setCancionActualNode(CircularDoublyLinkedList.Node<Cancion> cancionActualNode) {
        this.cancionActualNode = cancionActualNode;
    }
    
    public void ejecutarReproducirCancionActual(){
        reproducirCancionActual();
    }
    
    
    private CircularDoublyLinkedList<Cancion> listaDeReproduccion = new CircularDoublyLinkedList();
    private CircularDoublyLinkedList.Node<Cancion> cancionActualNode;
    private BasicPlayer reproductor;
    private boolean estaReproduciendo = false;
    private boolean pausado = false; 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
